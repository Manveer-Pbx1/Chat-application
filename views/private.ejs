<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat app</title>
  </head>
  <style>
    body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

    #form {
    background: rgba(0, 0, 0, 0.15);
    padding: 0.25rem;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    height: 3rem;
    box-sizing: border-box;
    backdrop-filter: blur(10px);
  }

  #message {
    border: none;
    position: relative;
    padding: 0 1rem;
    flex-grow: 1;
    border-radius: 2rem;
    margin: 0.25rem;
  }

  #message:focus {
    outline: none;
  }

  #form > button {
    background: #333;
    border: none;
    padding: 0 1rem;
    margin: 0.25rem;
    border-radius: 3px;
    outline: none;
    color: #fff;
  }

  /* Chat message display */
  #messages {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
  }

  #messages > li {
  display: block; /* Display messages as block elements */
  background-color: blue;
  border-radius: 55px;
  padding: 0.5rem 1rem;
  margin: 0.25rem;
  max-width: 65%;
  border-radius: 10px 55px 55px 55px;
  width: fit-content; /* Set width based on content */
  word-wrap: break-word; /* Allow long words to break */
}

span.user-join-message {
  position: fixed;
  bottom: 4rem; /* Adjust as needed */  
  right: 1rem;
  width: 10%; /* Adjust width as needed */
  color: rgb(145, 185, 168);
  font-weight: bold;
  background-color: yellow;
  padding: 5px;
}




  /* Typing indicator */
  #typing {
    position: fixed;
    bottom: 3.5rem;
    left: 1rem;
    color: #666;
  }

  /* Navigation bar */
  nav {
    background-color: rgb(135, 235, 168);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 2rem;
  }

  nav h1 {
    margin: 0;
    color: blue;
    font-size: 2rem;
  }

  ul {
    list-style-type: none;
  }

  li {
    margin-left: 1rem;
  }

  li:first-child {
    margin-left: 0;
  }

  li > a {
    text-decoration: none;
    color: #333;
    font-weight: bold;
    transition: color 0.3s ease;
  }

  li > a:hover {
    color: blue;
  }

  .user-message {
    text-align: left;
    background-color: #DCF8C6!important; /* Light green background for user messages */
    border-radius: 20px;
    padding: 10px 15px;
    margin-right: 50%; 
  }

  /* Other users' messages */
  .other-message {
    text-align: right;
    background-color: blue !important; /* Light gray background for other users' messages */
    border-radius: 20px;
    color: white;
    padding: 10px 15px;
    margin-left: 50%;
    align-self: flex-end;
  }
  .dark{
  background-color: rgba(0, 0, 0, 0.922);
        }
  #dark{
    position: absolute;
    right: 10%;
  }
  </style>
  <body>
    <nav>
      <h1>Chat<code style="font-size: 14px; color: #666;">< Global Mode
          /></code></h1>
      <ul>
        <li id="dark" style="cursor: pointer;"><i class="fas fa-moon"></i></li>
        <li><a href="/">Sign out</a></li>
      </ul>
    </nav>
    <div id="online-users"></div>
    <div id="typing"></div>
    <ul id="messages"></ul>
    <form id="form" autocomplete="off">
      <input type="text" id="message" placeholder="Enter message... ">
      <button id="send">Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script>
document.addEventListener('DOMContentLoaded', () => {
  const socket = io();
  const form = document.getElementById('form');
  const input = document.getElementById('message');
  const messages = document.getElementById('messages');
  const typing = document.getElementById('typing');
  let typingTimer;
  const nickname = '<%= locals.name %>';
  let userColor;
  let otherColor;

  const darkBtn = document.getElementById('dark');
        darkBtn.addEventListener('click', () => {
            document.body.classList.toggle('dark');
            section.forEach((element) => {
                element.classList.toggle('dark');
            });
            if (document.body.classList.contains('dark')) {
                darkBtn.innerHTML = '<i class="fas fa-sun"></i>';
                darkBtn.style.color = 'golden';
            } else {
                darkBtn.innerHTML = '<i class="fas fa-moon"></i>';
                darkBtn.style.color = 'white';
            }
        });


  form.addEventListener('submit', function (e) {
    e.preventDefault();
    if (input.value && nickname) {
      const message = input.value;
      socket.emit('message', { text: message, nickname: nickname, color: userColor}); // Include user's color in the message
      input.value = '';
    }
  });
  //typing
  input.addEventListener('input', function(){
    clearTimeout(typingTimer);
    socket.emit('typing');
    typingTimer = setTimeout(function(){
      socket.emit('stop typing');
    }, 1000);
  })

  socket.on('user typing', function(user){
    typing.textContent = user + ' is typing...';
  })
  socket.on('user stopped typing', function(){
    typing.textContent = '';
  })

  socket.on('message', function (msg) {
    var item = document.createElement('li');

    if (msg.nickname === nickname) {
      item.classList.add('user-message');
      item.textContent = msg.text;
    } else {
      var userName = document.createElement('h5');
      item.style.borderRadius = '55px 10px 55px 55px';
      userName.textContent = msg.nickname;
      item.appendChild(userName);
      var messageText = document.createElement('p');
      messageText.textContent = msg.text;
      item.appendChild(messageText);  
      item.classList.add('other-message');
    }


    messages.appendChild(item);
    window.scrollTo(0, document.body.scrollHeight);
  });

  // User connected
  socket.emit('new_user', {nickname: nickname, color: "rgb(135, 235, 168)"});
  socket.on("user_joined", (data)=>{
    var item = document.createElement('span');
    item.textContent = `${data.nickname} has joined the chat!`;
    item.classList.add('user-join-message');  
    document.body.appendChild(item);
  })
  //User disconnected
  window.addEventListener('beforeunload', ()=>{
    socket.emit('disconnect');
  })
  socket.on('user_left', (data) => {
  var item = document.createElement('span');
  item.textContent = `${data.nickname} has left the chat!`;
  item.classList.add('user-join-message');
  item.style.color = 'red';
  document.body.appendChild(item);
});


  
  });
    </script>
  </body>
</html>